name: app-ci

on:
  push:
    branches: [main]
    paths:
      - 'app/**'
  pull_request:
    branches: [main]
    paths:
      - 'app/**'

concurrency:
  group: app-ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: read

env:
  DOCKERHUB_ORG: s1natex
  BACKEND_IMAGE: s1natex/ms-demo-backend
  FRONTEND_IMAGE: s1natex/ms-demo-frontend

jobs:
  backend-unit:
    name: Backend unit tests (FastAPI)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app/backend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('app/backend/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Run pytest
        run: pytest -q --maxfail=1 --disable-warnings

  frontend-unit:
    name: Frontend unit tests (React/Vite)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app/frontend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            app/frontend/node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('app/frontend/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Install deps
        run: npm ci

      - name: Run vitest
        run: npm test -- --run

  integration-compose:
    name: Integration (docker compose + healthchecks)
    runs-on: ubuntu-latest
    needs: [backend-unit, frontend-unit]
    defaults:
      run:
        working-directory: app
    steps:
      - uses: actions/checkout@v4

      - name: Show Docker versions
        run: |
          docker --version
          docker compose version

      # Build images and run them together
      - name: Compose up (build)
        run: docker compose up -d --build

      - name: Wait for backend health
        run: |
          for i in {1..30}; do
            if curl -fsS http://localhost:8000/healthz >/dev/null; then echo "backend healthy"; exit 0; fi
            sleep 2
          done
          echo "backend not healthy"; docker compose logs backend; exit 1

      - name: Wait for frontend health
        run: |
          for i in {1..30}; do
            if curl -fsS http://localhost:8080/healthz >/dev/null; then echo "frontend healthy"; exit 0; fi
            sleep 2
          done
          echo "frontend not healthy"; docker compose logs frontend; exit 1

      - name: Verify API via frontend proxy
        run: |
          curl -fsS http://localhost:8080/api/hello | tee /tmp/proxied.json
          grep -q "Hello from FastAPI" /tmp/proxied.json

      - name: Tear down
        if: always()
        run: docker compose down -v

  docker-push:
    name: Build & Push images to Docker Hub (main only)
    runs-on: ubuntu-latest
    needs: [integration-compose]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # BACKEND
      - name: Meta (backend)
        id: meta_b
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BACKEND_IMAGE }}
          tags: |
            type=raw,value=latest
            type=sha,format=long

      - name: Build & Push backend
        uses: docker/build-push-action@v6
        with:
          context: app/backend
          push: true
          tags: ${{ steps.meta_b.outputs.tags }}
          labels: ${{ steps.meta_b.outputs.labels }}
          platforms: linux/amd64

      # FRONTEND
      - name: Meta (frontend)
        id: meta_f
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.FRONTEND_IMAGE }}
          tags: |
            type=raw,value=latest
            type=sha,format=long

      - name: Build & Push frontend
        uses: docker/build-push-action@v6
        with:
          context: app/frontend
          push: true
          tags: ${{ steps.meta_f.outputs.tags }}
          labels: ${{ steps.meta_f.outputs.labels }}
          platforms: linux/amd64
